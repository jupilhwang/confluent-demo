---
version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    hostname: zookeeper
    container_name: zookeeper
    restart: always
    ports:
      - 2181:2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-01:
    image: confluentinc/cp-server:6.2.0
    hostname: kafka-01
    container_name: kafka-01
    restart: always
    depends_on:
      - zookeeper
    ports:
      - 9091:9091
      - 19091:19091
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-01:19091,PLAINTEXT://kafka-01:9091

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_HEAL_BROKER_FAILURE_THRESHOLD_MS: 30000

      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-01:19091,kafka-02:19092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous

      KAFKA_LOG4J_LOGGERS: kafka.authorizer.logger=INFO
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

      # Schema Registry
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081

      # MDS
      KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_METADATA_SERVER_LISTENERS: http://0.0.0.0:8091
      KAFKA_CONFLUENT_METADATA_SERVER_ADVERTISED_LISTENERS: http://kafka-01:8091

      # EmbeddedKafkaRest: Kafka Client Configuration
      KAFKA_KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-01:19091,PLAINTEXT://kafka-02:19092

      # EmbeddedKafkaRest: MDS Client configuration
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://kafka-01:8091,http://kafka-02:8092

  kafka-02:
    image: confluentinc/cp-server:6.2.0
    hostname: kafka-02
    container_name: kafka-02
    restart: always
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
      - 19092:19092
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-02:19092,PLAINTEXT://kafka-02:9092

      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_SECURITY_EVENT_LOGGER_EXPORTER_KAFKA_TOPIC_REPLICAS: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_HEAL_BROKER_FAILURE_THRESHOLD_MS: 30000

      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-01:19091,kafka-02:19092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous

      KAFKA_LOG4J_LOGGERS: kafka.authorizer.logger=INFO
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO

      # Schema Registry
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081

      # MDS
      KAFKA_CONFLUENT_METADATA_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_METADATA_SERVER_LISTENERS: http://0.0.0.0:8092
      KAFKA_CONFLUENT_METADATA_SERVER_ADVERTISED_LISTENERS: http://kafka-02:8092

      # EmbeddedKafkaRest: Kafka Client Configuration
      KAFKA_KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka-01:19091,PLAINTEXT://kafka-02:19092

      # EmbeddedKafkaRest: MDS Client configuration
      KAFKA_KAFKA_REST_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS: http://kafka-01:8091,http://kafka-02:8092

  schema-registry:
    image: confluentinc/cp-schema-registry:6.2.0
    hostname: schema-registry
    container_name: schema-registry
    restart: always
    depends_on:
      - zookeeper
      - kafka-01
      - kafka-02
    ports:
      - 8081:8081
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka-01:19091,kafka-02:19092
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  kafka-connect:
    image: confluentinc/cp-kafka-connect:6.2.0
    hostname: kafka-connect
    container_name: kafka-connect
    restart: always
    depends_on:
      - kafka-01
      - kafka-02
      - schema-registry
    ports:
      - 18083:18083
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka-01:19091,kafka-02:19092
      CONNECT_REST_PORT: 18083
      CONNECT_GROUP_ID: kafka-connect
      CONNECT_PRODUCER_CLIENT_ID: kafka-connect
      CONNECT_LISTENERS: http://0.0.0.0:18083
      CONNECT_PRODUCER_ENABLE_IDEMPOTENCE: 'true'
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: connect-statuses
      CONNECT_REPLICATION_FACTOR: 1
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081

      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter

      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: org.apache.kafka.connect.runtime.rest=ERROR,org.reflections=ERROR
      CONNECT_PLUGIN_PATH: /usr/share/java,/usr/share/confluent-hub-components

      # Allow overriding configs on the connector level
      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: All

      # Interceptor config
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
      CLASSPATH: /usr/share/java/monitoring-interceptors/*

      #KAFKA_JVM_PERFORMANCE_OPTS: -server -XX:+UseG1GC -XX:GCTimeRatio=1 -XX:MinHeapFreeRatio=10 -XX:MaxHeapFreeRatio=20 -XX:MaxGCPauseMillis=10000 -XX:InitiatingHeapOccupancyPercent=35 -XX:+ExplicitGCInvokesConcurrent -XX:MaxInlineLevel=15 -Djava.awt.headless=true
      
  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:6.2.0
    hostname: ksqldb-server
    container_name: ksqldb-server
    restart: always
    ports:
      - 8088:8088
    depends_on:
      - kafka-01
      - kafka-02
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka-01:19091,kafka-02:19092
      KSQL_LISTENERS: http://0.0.0.0:8088
      KSQL_KSQL_SERVICE_ID: ksqldb-01
      KSQL_CUB_KAFKA_TIMEOUT: 300
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # -v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v
      # Useful settings for development/laptop use - modify as needed for Prod
      KSQL_KSQL_COMMIT_INTERVAL_MS: 2000
      KSQL_KSQL_SINK_PARTITIONS: 1
      KSQL_KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      # KSQL_KSQL_STREAMS_AUTO_OFFSET_RESET: earliest
      # -v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v
      # Producer Confluent Monitoring Interceptors for Control Center streams monitoring
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor

  control-center:
    image: confluentinc/cp-enterprise-control-center:6.2.0
    hostname: control-center
    container_name: control-center
    restart: always
    depends_on:
      - zookeeper
      - kafka-01
      - kafka-02
      - schema-registry
      - kafka-connect
      - ksqldb-server
    ports:
      - 9021:9021
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka-01:19091,kafka-02:19092
      CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONTROL_CENTER_CONNECT_KAFKA-CONNECT_CLUSTER: http://kafka-connect:18083
      CONTROL_CENTER_CONNECT_CONNECT-DEBEZIUM_CLUSTER: http://connect-debezium:8083
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # The advertised URL needs to be the URL on which the browser
      #  can access the KSQL server (e.g. http://localhost:8088/info)
      CONTROL_CENTER_KSQL_KSQLDB-01_URL: http://ksqldb-server:8088
      CONTROL_CENTER_KSQL_KSQLDB-01_ADVERTISED_URL: http://ksqldb-server:8088
      # -v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v-v
      # Useful settings for development/laptop use - modify as needed for Prod
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_COMMAND_TOPIC_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_REPLICATION: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_INTERNAL_TOPICS_REPLICATION: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONTROL_CENTER_STREAMS_NUM_STREAM_THREADS: 1
      CONTROL_CENTER_STREAMS_CACHE_MAX_BYTES_BUFFERING: 0
    command:
      - bash
      - -c 
      - |
        echo "Waiting a minute for Kafka brokers to start and necessary topics to be available"
        sleep 60  
        /etc/confluent/docker/run

  kafkacat:
    image: confluentinc/cp-kafkacat:latest
    container_name: kafkacat
    depends_on:
      - kafka-01
    entrypoint: sleep infinity

# Other systems
  datagen-ratings:
    image: confluentinc/ksqldb-examples:6.2.0
    container_name: datagen-ratings
    depends_on:
      - kafka-01
      - kafka-02
      - schema-registry
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b kafka-01:19091 1 300 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 8081 300 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 20 && \
                       ksql-datagen \
                          quickstart=ratings \
                          format=avro \
                          topic=ratings \
                          maxInterval=500 \
                          bootstrap-server=kafka-01:19091,kafka-02:19092 \
                          schemaRegistryUrl=http://schema-registry:8081 \
                          propertiesFile=/etc/ksqldb/datagen.properties'"

  postgres:
    image: postgres
    restart: always
    hostname: postgres
    container_name: postgres  
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
        

  mysql:
    # *-----------------------------*
    # To connect to the DB: 
    #   docker-compose exec mysql bash -c 'mysql -u root -p$MYSQL_ROOT_PASSWORD'
    # *-----------------------------*
    image: debezium/example-mysql:1.6.1.Final
    hostname: mysql
    container_name: mysql
    restart: always
    ports:
      - 3306:3306
    environment:
     - MYSQL_ROOT_PASSWORD=debezium
     - MYSQL_USER=mysqluser
     - MYSQL_PASSWORD=mysqlpw
    volumes:
     - ${PWD}/data/customers.sql:/docker-entrypoint-initdb.d/z99_dump.sql

